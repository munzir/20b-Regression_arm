tic;
syms q_1 q_2 q_3 q_4 q_5 q_6 q_7 real
syms dq_1 dq_2 dq_3 dq_4 dq_5 dq_6 dq_7 real
syms ddq_1 ddq_2 ddq_3 ddq_4 ddq_5 ddq_6 ddq_7 real
syms m_1 MX_1 MY_1 MZ_1 XX_1 XY_1 XZ_1 YY_1 YZ_1 ZZ_1 real
syms m_2 MX_2 MY_2 MZ_2 XX_2 XY_2 XZ_2 YY_2 YZ_2 ZZ_2 real
syms m_3 MX_3 MY_3 MZ_3 XX_3 XY_3 XZ_3 YY_3 YZ_3 ZZ_3 real
syms m_4 MX_4 MY_4 MZ_4 XX_4 XY_4 XZ_4 YY_4 YZ_4 ZZ_4 real
syms m_5 MX_5 MY_5 MZ_5 XX_5 XY_5 XZ_5 YY_5 YZ_5 ZZ_5 real
syms m_6 MX_6 MY_6 MZ_6 XX_6 XY_6 XZ_6 YY_6 YZ_6 ZZ_6 real
syms m_7 MX_7 MY_7 MZ_7 XX_7 XY_7 XZ_7 YY_7 YZ_7 ZZ_7 real

%% My Time Differentiation Trick
warning('off','all');
syms t dQ1 dQ2 dQ3 dQ4 dQ5 dQ6 dQ7 real
syms Q1(t) Q2(t) Q3(t) Q4(t) Q5(t) Q6(t) Q7(t)  
warning('on','all');

dQ1=diff(Q1,t); dQ2=diff(Q2,t); dQ3=diff(Q3,t); dQ4=diff(Q4,t); dQ5=diff(Q5,t); dQ6=diff(Q6,t); dQ7=diff(Q7,t);

mydiff = @(H) formula(subs(diff(symfun(subs(H,...
    [q_1,q_2,q_3,q_4,q_5,q_6,q_7],...
    [Q1,Q2,Q3,Q4,Q5,Q6,Q7]),t),t),...
    [Q1,Q2,Q3,Q4,Q5,Q6,Q7,dQ1,dQ2,dQ3,dQ4,dQ5,dQ6,dQ7],...
    [q_1,q_2,q_3,q_4,q_5,q_6,q_7,dq_1,dq_2,dq_3,dq_4,dq_5,dq_6,dq_7]));

%% Use my old code to generate the dynamic model
restoredefaultpath;
addpath('./helper');
nDOF = 7;
f = getKrangFrames(nDOF);
E = totalKE(f);
U = totalPE(f);
A = findA(f, E);
C = findC(f, A);
Q = findQ(f, U);


%% Rotor Inertia
syms N_1 N_2 N_3 N_4 N_5 N_6 N_7 real % N_j is the transmission ratio of joint j. N_j = dq_mj/dq_j where dq_mj is the rotor velocity of actuator j
syms J_m1 J_m2 J_m3 J_m4 J_m5 J_m6 J_m7 real % J_mj is the moment of inertia of rotor and transmission of actuator j
N = [N_1; N_2; N_3; N_4; N_5; N_6; N_7];
J_m = [J_m1; J_m2; J_m3; J_m4; J_m5; J_m6; J_m7];
for i=1:nDOF
    A(i,i) = A(i,i) + N(i)^2*J_m(i);
end

%% Parameter file
L = rand(1,5); % L6 L7 L8 L9 L10
params = rand(nDOF, 12); % m, MX, MY, MZ, XX, XY, XZ, YY, YZ, ZZ, N, J_m
% L = [, , , , ];
% params(1, :) = [, , , , , , , , , , , ];
% params(2, :) = [, , , , , , , , , , , ];
% params(3, :) = [, , , , , , , , , , , ];
% params(4, :) = [, , , , , , , , , , , ];
% params(5, :) = [, , , , , , , , , , , ];
% params(6, :) = [, , , , , , , , , , , ];
% params(7, :) = [, , , , , , , , , , , ];
fid = fopen('parameters.m', 'w');
dateStr = datestr(now);
fprintf(fid, '%% Auto-generated by dynamicModel.m on %s. Do not edit!\n', dateStr);
fprintf(fid, '%% If dynamicModel.m was modified after %s, generate this code again using:\n', dateStr);
fprintf(fid, '%% >> dynamicModel;\n\n');
if(max(max(params)<=1))
    fprintf(fid, 'disp(''WARNING: The parameters are randomly generated'');\n');
    fprintf(fid, 'disp(''Go to dynamicModel.m file, uncomment following lines. Fill the correct parameters. And run dynamicModel.m again'');\n');
    fprintf(fid, 'disp(''%% L = [, , , ];'');\n');
    fprintf(fid, 'disp(''%% params(1, :) = [, , , , , , , , , , , ];'');\n');
    fprintf(fid, 'disp(''%% params(2, :) = [, , , , , , , , , , , ];'');\n');
    fprintf(fid, 'disp(''%% params(3, :) = [, , , , , , , , , , , ];'');\n');
    fprintf(fid, 'disp(''%% params(4, :) = [, , , , , , , , , , , ];'');\n');
    fprintf(fid, 'disp(''%% params(5, :) = [, , , , , , , , , , , ];'');\n');
    fprintf(fid, 'disp(''%% params(6, :) = [, , , , , , , , , , , ];'');\n');
    fprintf(fid, 'disp(''%% params(7, :) = [, , , , , , , , , , , ];'');\n');
end
fprintf(fid, 'g = 9.8;\n');
for i=1:length(L)
    fprintf(fid, 'L%d = %d;\n', 5+i, L(i));
end
for i=1:nDOF
    fprintf(fid, 'm_%d = %d;\n', i, params(i, 1));
    fprintf(fid, 'MX_%d = %d;\n', i, params(i, 2));
    fprintf(fid, 'MY_%d = %d;\n', i, params(i, 3));
    fprintf(fid, 'MZ_%d = %d;\n', i, params(i, 4));
    fprintf(fid, 'XX_%d = %d;\n', i, params(i, 5));
    fprintf(fid, 'XY_%d = %d;\n', i, params(i, 6));
    fprintf(fid, 'XZ_%d = %d;\n', i, params(i, 7));
    fprintf(fid, 'YY_%d = %d;\n', i, params(i, 8));
    fprintf(fid, 'YZ_%d = %d;\n', i, params(i, 9));
    fprintf(fid, 'ZZ_%d = %d;\n', i, params(i, 10));
    fprintf(fid, 'N_%d = %d;\n', i, params(i, 11));
    fprintf(fid, 'J_m%d = %d;\n', i, params(i, 12));
end
fclose(fid);

%% Compute Dynamics File Auto-generation
fid = fopen('computeDynamics.m', 'w');
fprintf(fid, '%% Auto-generated by dynamicModel.m on %s. Do not edit!\n', dateStr);
fprintf(fid, '%% If dynamicModel.m was modified after %s, generate this code again using:\n', dateStr);
fprintf(fid, '%% >> dynamicModel;\n\n');
fprintf(fid, 'function [A, C, Q] = computeDynamics(q, dq)\n\n');
fprintf(fid, 'parameters\n');
for i=1:nDOF
    fprintf(fid, 'q_%d = q(%d); dq_%d = dq(%d);\n', i, i, i, i);
end
for i=1:nDOF
    for j=1:nDOF
fprintf(fid, 'A(%d,%d) = %s;\n', i, j, char(A(i,j)));
    end
end

for i=1:nDOF
    for j=1:nDOF
fprintf(fid, 'C(%d,%d) = %s;\n', i, j, char(C(i,j)));
    end
end

for i=1:nDOF
fprintf(fid, 'Q(%d,%d) = %s;\n', i, 1, char(Q(i)));
end
fprintf(fid, 'end\n');
fclose(fid);

%% Observation matrix

q = [q_1 q_2 q_3 q_4 q_5 q_6 q_7]';
dq = [dq_1 dq_2 dq_3 dq_4 dq_5 dq_6 dq_7]';
ddq = [ddq_1 ddq_2 ddq_3 ddq_4 ddq_5 ddq_6 ddq_7]';
RBD = A*ddq + C*dq + Q;
params = [m_1 MX_1 MY_1 MZ_1 XX_1 XY_1 XZ_1 YY_1 YZ_1 ZZ_1 J_m1,...
          m_2 MX_2 MY_2 MZ_2 XX_2 XY_2 XZ_2 YY_2 YZ_2 ZZ_2 J_m2,...
          m_3 MX_3 MY_3 MZ_3 XX_3 XY_3 XZ_3 YY_3 YZ_3 ZZ_3 J_m3,...
          m_4 MX_4 MY_4 MZ_4 XX_4 XY_4 XZ_4 YY_4 YZ_4 ZZ_4 J_m4,...
          m_5 MX_5 MY_5 MZ_5 XX_5 XY_5 XZ_5 YY_5 YZ_5 ZZ_5 J_m5,...
          m_6 MX_6 MY_6 MZ_6 XX_6 XY_6 XZ_6 YY_6 YZ_6 ZZ_6 J_m6,...
          m_7 MX_7 MY_7 MZ_7 XX_7 XY_7 XZ_7 YY_7 YZ_7 ZZ_7 J_m7]';
fid = fopen('PHI.m', 'w');
fprintf(fid, '%% Auto-generated by dynamicModel.m on %s. Do not edit!\n', dateStr);
fprintf(fid, '%% If dynamicModel.m was modified after %s, generate this code again using:\n', dateStr);
fprintf(fid, '%% >> dynamicModel;\n\n');
fprintf(fid, 'function out = PHI(q, dq, ddq)\n');
fprintf(fid, 'parameters\n');
for i=1:nDOF
    fprintf(fid, 'q_%d = q(%d); dq_%d = dq(%d); ddq_%d = ddq(%d);\n', i, i, i, i, i, i);
end
fprintf(fid, 'out = zeros(%d, %d);\n', nDOF, length(params));
for i=1:nDOF
    for j=1:length(params)
        phi = diff(RBD(i), params(j));
        if(~isequal(phi, sym(0)))
            fprintf(fid, 'out(%d, %d) = %s;\n', i, j, char(phi));
        end
    end
end
fprintf(fid, 'end');
fclose(fid);   

%% Jacobians
TfEE = Tf(f, '8', '0');
EE = [TfEE(1:3,4); TfEE(1:3,1); TfEE(1:3,2); TfEE(1:3,3)];
JEE = sym(zeros(length(EE), length(q)));
for i=1:length(EE)
    for j=1:length(q)
        JEE(i,j) = diff(EE(i), q(j));
    end
end
dJEE = mydiff(JEE);

fid = fopen('JEE.m', 'w');
fprintf(fid, '%% Auto-generated by dynamicModel.m on %s. Do not edit!\n', dateStr);
fprintf(fid, '%% If dynamicModel.m was modified after %s, generate this code again using:\n', dateStr);
fprintf(fid, '%% >> dynamicModel;\n\n');
fprintf(fid, 'function J = JEE(q)\n');
fprintf(fid, 'parameters\n');
for i=1:nDOF
    fprintf(fid, 'q_%d = q(%d);\n', i, i);
end
fprintf(fid, 'J = zeros(%d, %d);\n', length(EE), length(q));
for i=1:length(EE)
    for j=1:length(q)
        if(~isequal(JEE(i,j), sym(0)))
            fprintf(fid, 'J(%d, %d) = %s;\n', i, j, char(JEE(i,j)));
        end
    end
end
fprintf(fid, 'end');
fclose(fid);

fid = fopen('dJEE.m', 'w');
fprintf(fid, '%% Auto-generated by dynamicModel.m on %s. Do not edit!\n', dateStr);
fprintf(fid, '%% If dynamicModel.m was modified after %s, generate this code again using:\n', dateStr);
fprintf(fid, '%% >> dynamicModel;\n\n');
fprintf(fid, 'function dJ = JEE(q, dq)\n');
fprintf(fid, 'parameters\n');
for i=1:nDOF
    fprintf(fid, 'q_%d = q(%d); dq_%d = dq(%d)\n', i, i, i, i);
end
fprintf(fid, 'dJ = zeros(%d, %d);\n', length(EE), length(q));
for i=1:length(EE)
    for j=1:length(q)
        if(~isequal(dJEE(i,j), sym(0)))
            fprintf(fid, 'dJ(%d, %d) = %s;\n', i, j, char(dJEE(i,j)));
        end
    end
end
fprintf(fid, 'end');
fclose(fid);


toc;